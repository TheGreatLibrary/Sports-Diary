package com.sinya.projects.sportsdiary.data.database.repository

import android.content.Context
import android.util.Log
import androidx.compose.ui.text.intl.Locale

import com.sinya.projects.sportsdiary.data.database.dao.ExercisesDao
import com.sinya.projects.sportsdiary.data.database.entity.ExerciseMuscles
import com.sinya.projects.sportsdiary.data.database.entity.ExerciseTranslations
import com.sinya.projects.sportsdiary.data.database.entity.Exercises
import com.sinya.projects.sportsdiary.presentation.trainingPage.modalSheetCategory.ExerciseUi
import jakarta.inject.Inject
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONArray

data class ExerciseMusclesData(
    val value: Int,
    val muscleId: Int,
    val exerciseId: Int,
    val language: String,
    val name: String
)

interface ExercisesRepository {
    suspend fun getExercisesList(): List<ExerciseUi>
    suspend fun importExercisesFromAssets(
        fileName: String = "exercise_j.json",
        context: Context
    ): Int

    suspend fun getExerciseTranslations(language: String): List<ExerciseTranslations>
    suspend fun getExerciseById(id: Int, language: String): ExerciseTranslations
    suspend fun getExerciseMusclesById(id: Int, language: String): List<ExerciseMusclesData>
}

class ExercisesRepositoryImpl @Inject constructor(
    private val exercisesDao: ExercisesDao,
) : ExercisesRepository {

    override suspend fun getExercisesList(): List<ExerciseUi> {
        val db = exercisesDao.getExercisesList(Locale.current.language)
        return db
    }

    override suspend fun importExercisesFromAssets(fileName: String, context: Context): Int {
        return withContext(Dispatchers.IO) {
            try {
                Log.d("ExerciseImport", "–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")

                val count = exercisesDao.getCount()
                if (count > 0) {
                    Log.w("ExerciseImport", "–ë–∞–∑–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç $count —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
                    return@withContext count
                }

                // –ß–∏—Ç–∞–µ–º JSON –∏–∑ assets
                Log.d("ExerciseImport", "–ß—Ç–µ–Ω–∏–µ JSON –∏–∑ assets...")
                val jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }
                Log.d("ExerciseImport", "JSON —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${jsonString.length} —Å–∏–º–≤–æ–ª–æ–≤")

                // –ü–∞—Ä—Å–∏–º JSON
                Log.d("ExerciseImport", "–ü–∞—Ä—Å–∏–Ω–≥ JSON...")
                val jsonArray = JSONArray(jsonString)
                Log.d("ExerciseImport", "–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ JSON: ${jsonArray.length()}")

                val exercises = mutableListOf<Exercises>()
                val exercisesTranslations = mutableListOf<ExerciseTranslations>()
                val exerciseMuscles = mutableListOf<ExerciseMuscles>()

                // –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                val forceSet = mutableSetOf<String>()
                val levelSet = mutableSetOf<String>()
                val mechanicSet = mutableSetOf<String>()
                val equipmentSet = mutableSetOf<String>()
                val categorySet = mutableSetOf<String>()

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                for (i in 0 until jsonArray.length()) {
                    try {
                        val jsonObject = jsonArray.getJSONObject(i)
                        val exerciseId = i + 1

                        val force = jsonObject.optString("force", "")
                        val level = jsonObject.optString("level", "")
                        val mechanic = jsonObject.optString("mechanic", "")
                        val equipment = jsonObject.optString("equipment", "")
                        val category = jsonObject.optString("category", "")

                        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        if (force.isNotEmpty()) forceSet.add(force)
                        if (level.isNotEmpty()) levelSet.add(level)
                        if (mechanic.isNotEmpty()) mechanicSet.add(mechanic)
                        if (equipment.isNotEmpty()) equipmentSet.add(equipment)
                        if (category.isNotEmpty()) categorySet.add(category)

                        val primaryMuscles = jsonArrayToIntList(jsonObject.optJSONArray("primary_muscles"))
                        val secondaryMuscles = jsonArrayToIntList(jsonObject.optJSONArray("secondary_muscles"))
                        val translations = jsonObject.optJSONObject("translations")

                        exercises.add(
                            Exercises(
                                id = exerciseId,
                                icon = ""
                            )
                        )

                        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –º—ã—à—Ü–∞–º–∏
                        primaryMuscles.forEach { muscleId ->
                            exerciseMuscles.add(
                                ExerciseMuscles(
                                    muscleId = muscleId,
                                    exerciseId = exerciseId,
                                    value = 2 // primary
                                )
                            )
                        }

                        secondaryMuscles.forEach { muscleId ->
                            exerciseMuscles.add(
                                ExerciseMuscles(
                                    muscleId = muscleId,
                                    exerciseId = exerciseId,
                                    value = 1 // secondary
                                )
                            )
                        }

                        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
                        translations?.optJSONObject("en")?.let { enTranslation ->
                            exercisesTranslations.add(
                                ExerciseTranslations(
                                    exerciseId = exerciseId,
                                    language = "en",
                                    name = enTranslation.optString("name", ""),
                                    description = enTranslation.optString("description", ""),
                                    rule = jsonArrayToList(
                                        enTranslation.optJSONArray("instructions")
                                    ).joinToString("\n\n"),
                                    force = translateForce(force, "en"),
                                    level = translateLevel(level, "en"),
                                    mechanic = translateMechanic(mechanic, "en"),
                                    equipment = translateEquipment(equipment, "en"),
                                    category = translateCategory(category, "en")
                                )
                            )
                        }

                        // –†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
                        translations?.optJSONObject("ru")?.let { ruTranslation ->
                            exercisesTranslations.add(
                                ExerciseTranslations(
                                    exerciseId = exerciseId,
                                    language = "ru",
                                    name = ruTranslation.optString("name", ""),
                                    description = ruTranslation.optString("description", ""),
                                    rule = jsonArrayToList(
                                        ruTranslation.optJSONArray("instructions")
                                    ).joinToString("\n\n"),
                                    force = translateForce(force, "ru"),
                                    level = translateLevel(level, "ru"),
                                    mechanic = translateMechanic(mechanic, "ru"),
                                    equipment = translateEquipment(equipment, "ru"),
                                    category = translateCategory(category, "ru")
                                )
                            )
                        }

                        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                        if ((i + 1) % 100 == 0) {
                            Log.d("ExerciseImport", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${jsonArray.length()} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
                        }

                    } catch (e: Exception) {
                        Log.e("ExerciseImport", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è $i: ${e.message}")
                        e.printStackTrace()
                    }
                }

                // –í—ã–≤–æ–¥–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                Log.d("ExerciseImport", "========== METADATA TO TRANSLATE ==========")
                Log.d("ExerciseImport", "üìä FORCE (${forceSet.size}): ${forceSet.sorted()}")
                Log.d("ExerciseImport", "üìà LEVEL (${levelSet.size}): ${levelSet.sorted()}")
                Log.d("ExerciseImport", "‚öôÔ∏è MECHANIC (${mechanicSet.size}): ${mechanicSet.sorted()}")
                Log.d("ExerciseImport", "üèãÔ∏è EQUIPMENT (${equipmentSet.size}): ${equipmentSet.sorted()}")
                Log.d("ExerciseImport", "üéØ CATEGORY (${categorySet.size}): ${categorySet.sorted()}")
                Log.d("ExerciseImport", "============================================")

                // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                Log.d("ExerciseImport", "–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
                exercisesDao.insertExercisesData(exercises, exercisesTranslations, exerciseMuscles)

                val insertedCount = exercisesDao.getCount()
                Log.d("ExerciseImport", "‚úì –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ $insertedCount —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
                Log.d("ExerciseImport", "‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ ${exercisesTranslations.size} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
                Log.d("ExerciseImport", "‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ ${exerciseMuscles.size} —Å–≤—è–∑–µ–π —Å –º—ã—à—Ü–∞–º–∏")

                insertedCount

            } catch (e: Exception) {
                // –ù–ï –≤—ã–≤–æ–¥–∏–º jsonString –≤ –ª–æ–≥!
                Log.e("ExerciseImport", "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê")
                Log.e("ExerciseImport", "–¢–∏–ø: ${e.javaClass.simpleName}")
              //  Log.e("ExerciseImport", "–°–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}")
                Log.e("ExerciseImport", "Stack trace –ø–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                e.stackTrace.take(5).forEach {
                    Log.e("ExerciseImport", "  at ${it}")
                }
                0
            }
        }
    }

    override suspend fun getExerciseTranslations(language: String): List<ExerciseTranslations> {
        return exercisesDao.getExercisesTranslations(language)
    }

    override suspend fun getExerciseById(id: Int, language: String): ExerciseTranslations {
        return exercisesDao.getExerciseById(id, language)
    }


    override suspend fun getExerciseMusclesById(id: Int, language: String): List<ExerciseMusclesData> {
        return exercisesDao.getExerciseMuscleById(id, language)
    }
}

private fun jsonArrayToIntList(jsonArray: JSONArray?): List<Int> {
    if (jsonArray == null) return emptyList()
    val list = mutableListOf<Int>()
    for (i in 0 until jsonArray.length()) {
        list.add(jsonArray.getInt(i))
    }
    return list
}

private fun jsonArrayToList(jsonArray: JSONArray?): List<String> {
    if (jsonArray == null) return emptyList()
    val list = mutableListOf<String>()
    for (i in 0 until jsonArray.length()) {
        list.add(jsonArray.getString(i))
    }
    return list
}

fun translateForce(force: String, language: String): String {
    return when (language) {
        "ru" -> when (force) {
            "pull" -> "–¢—è–≥–∞"
            "push" -> "–ñ–∏–º"
            "static" -> "–°—Ç–∞—Ç–∏–∫–∞"
            else -> ""
        }
        "en" -> when (force) {
            "pull" -> "Pull"
            "push" -> "Push"
            "static" -> "Static"
            else -> ""
        }
        else -> force
    }
}

fun translateLevel(level: String, language: String): String {
    return when (language) {
        "ru" -> when (level) {
            "beginner" -> "–ù–æ–≤–∏—á–æ–∫"
            "intermediate" -> "–°—Ä–µ–¥–Ω–∏–π"
            "expert" -> "–≠–∫—Å–ø–µ—Ä—Ç"
            else -> ""
        }
        "en" -> when (level) {
            "beginner" -> "Beginner"
            "intermediate" -> "Intermediate"
            "expert" -> "Expert"
            else -> ""
        }
        else -> level
    }
}

fun translateMechanic(mechanic: String, language: String): String {
    return when (language) {
        "ru" -> when (mechanic) {
            "compound" -> "–ë–∞–∑–æ–≤–æ–µ"
            "isolation" -> "–ò–∑–æ–ª–∏—Ä—É—é—â–µ–µ"
            else -> ""
        }
        "en" -> when (mechanic) {
            "compound" -> "Compound"
            "isolation" -> "Isolation"
            else -> ""
        }
        else -> mechanic
    }
}

fun translateEquipment(equipment: String, language: String): String {
    return when (language) {
        "ru" -> when (equipment) {
            "bands" -> "–õ–µ–Ω—Ç—ã"
            "barbell" -> "–®—Ç–∞–Ω–≥–∞"
            "body only" -> "–°–≤–æ–π –≤–µ—Å"
            "cable" -> "–ë–ª–æ–∫"
            "dumbbell" -> "–ì–∞–Ω—Ç–µ–ª–∏"
            "e-z curl bar" -> "EZ-–≥—Ä–∏—Ñ"
            "exercise ball" -> "–§–∏—Ç–±–æ–ª"
            "foam roll" -> "–†–æ–ª–ª"
            "kettlebells" -> "–ì–∏—Ä–∏"
            "machine" -> "–¢—Ä–µ–Ω–∞–∂—ë—Ä"
            "medicine ball" -> "–ú–µ–¥–±–æ–ª"
            "other" -> "–î—Ä—É–≥–æ–µ"
            else -> ""
        }
        "en" -> when (equipment) {
            "bands" -> "Bands"
            "barbell" -> "Barbell"
            "body only" -> "Body Only"
            "cable" -> "Cable"
            "dumbbell" -> "Dumbbell"
            "e-z curl bar" -> "E-Z Curl Bar"
            "exercise ball" -> "Exercise Ball"
            "foam roll" -> "Foam Roll"
            "kettlebells" -> "Kettlebells"
            "machine" -> "Machine"
            "medicine ball" -> "Medicine Ball"
            "other" -> "Other"
            else -> ""
        }
        else -> equipment
    }
}

fun translateCategory(category: String, language: String): String {
    return when (language) {
        "ru" -> when (category) {
            "cardio" -> "–ö–∞—Ä–¥–∏–æ"
            "olympic weightlifting" -> "–¢—è–∂—ë–ª–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞"
            "plyometrics" -> "–ü–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞"
            "powerlifting" -> "–ü–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥"
            "strength" -> "–°–∏–ª–æ–≤—ã–µ"
            "stretching" -> "–†–∞—Å—Ç—è–∂–∫–∞"
            "strongman" -> "–°—Ç—Ä–æ–Ω–≥–º–µ–Ω"
            else -> ""
        }
        "en" -> when (category) {
            "cardio" -> "Cardio"
            "olympic weightlifting" -> "Olympic Weightlifting"
            "plyometrics" -> "Plyometrics"
            "powerlifting" -> "Powerlifting"
            "strength" -> "Strength"
            "stretching" -> "Stretching"
            "strongman" -> "Strongman"
            else -> ""
        }
        else -> category
    }
}